{"version":3,"sources":["components/Genre.js","components/Movie.js","components/Movies.js","App.js","reportWebVitals.js","index.js"],"names":["Genre","genre","className","Movie","year","title","summary","poster","genres","src","alt","map","index","slice","Movies","movies","console","log","movie","id","medium_cover_image","App","useState","isLoading","setIsLoading","setMovies","getMovies","a","axios","get","fetchedMovies","data","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAMeA,EAJD,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACf,OAAO,oBAAIC,UAAU,cAAd,SAA6BD,KC4BvBE,EA3BD,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OAC7C,OACE,sBAAKN,UAAU,QAAf,UACE,qBAAKO,IAAKF,EAAQG,IAAKL,EAAOA,MAAOA,IACrC,sBAAKH,UAAU,aAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BG,IAC7B,oBAAIH,UAAU,aAAd,SAA4BE,IAC5B,oBAAIF,UAAU,eAAd,SACGM,EAAOG,KAAI,SAACV,EAAOW,GAAR,OACV,cAAC,EAAD,CAAmBX,MAAOA,GAAdW,QAGhB,oBAAGV,UAAU,gBAAb,UAA8BI,EAAQO,MAAM,EAAG,KAA/C,gBCMOC,EAnBA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEhB,OADAC,QAAQC,IAAIF,GAEV,mCACGA,EAAOJ,KAAI,SAACO,GAAD,OACV,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACVf,KAAMc,EAAMd,KACZC,MAAOa,EAAMb,MACbC,QAASY,EAAMZ,QACfC,OAAQW,EAAME,mBACdZ,OAAQU,EAAMV,QANTU,EAAMC,UCiCNE,EArCH,WAAO,IAAD,EACkBC,oBAAS,GAD3B,mBACTC,EADS,KACEC,EADF,OAEYF,mBAAS,IAFrB,mBAETP,EAFS,KAEDU,EAFC,KAIVC,EAAS,uCAAG,4BAAAC,EAAA,sEAOYC,IAAMC,IAChC,yEARc,OAOVC,EAPU,OAUhBL,EAAUK,EAAcC,KAAKA,KAAKhB,QAClCS,GAAa,GAXG,2CAAH,qDAkBf,OAJAQ,qBAAU,WACRN,MACC,IAGD,yBAASxB,UAAU,YAAnB,SACGqB,EACC,qBAAKrB,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGF,qBAAKA,UAAU,SAAf,SACE,cAAC,EAAD,CAAQa,OAAQA,SCvBXkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7989885b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Genre = ({ genre }) => {\r\n  return <li className=\"movie-genre\">{genre}</li>;\r\n};\r\n\r\nexport default Genre;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Genre from \"./Genre\";\r\n\r\nconst Movie = ({ year, title, summary, poster, genres }) => {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie-data\">\r\n        <h3 className=\"movie-title\">{title}</h3>\r\n        <h5 className=\"movie-year\">{year}</h5>\r\n        <ul className=\"movie-genres\">\r\n          {genres.map((genre, index) => (\r\n            <Genre key={index} genre={genre} />\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie-summary\">{summary.slice(0, 180)}...</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport Movie from \"./Movie\";\r\n\r\nconst Movies = ({ movies }) => {\r\n  console.log(movies);\r\n  return (\r\n    <>\r\n      {movies.map((movie) => (\r\n        <Movie\r\n          key={movie.id}\r\n          id={movie.id}\r\n          year={movie.year}\r\n          title={movie.title}\r\n          summary={movie.summary}\r\n          poster={movie.medium_cover_image}\r\n          genres={movie.genres}\r\n        />\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport Movies from \"./components/Movies\";\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n\n  const getMovies = async () => {\n    // const {\n    //   data: {\n    //     data: { fetchedMovies },\n    //   },\n    // } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json\");\n    // setMovies({ fetchedMovies });\n    const fetchedMovies = await axios.get(\n      \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"\n    );\n    setMovies(fetchedMovies.data.data.movies);\n    setIsLoading(false);\n  };\n\n  useEffect(() => {\n    getMovies();\n  }, []);\n\n  return (\n    <section className=\"container\">\n      {isLoading ? (\n        <div className=\"loader\">\n          <span className=\"loader-text\">Loading...</span>\n        </div>\n      ) : (\n        <div className=\"movies\">\n          <Movies movies={movies} />\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}